<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Blackrock Galway – Tides, Weather & Sea Temp</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background: url('https://upload.wikimedia.org/wikipedia/commons/3/34/Galway_Hooker_3.jpg') no-repeat center center fixed;
      background-size: cover;
      color: #fff;
    }
    header {
      background: maroon;
      padding: 1rem;
      text-align: center;
    }
    h1 {
      color: #fff;
      margin: 0;
    }
    .container {
      display: flex;
      flex-wrap: wrap;
      background-color: rgba(128, 0, 0, 0.8);
      padding: 1rem;
    }
    .box {
      flex: 1 1 300px;
      background-color: rgba(255, 0, 0, 0.85);
      margin: 0.5rem;
      padding: 1rem;
      border-radius: 10px;
    }
    h2 {
      margin-top: 0;
      color: #fff;
    }
    button {
      background: #fff;
      color: maroon;
      padding: 0.5rem 1rem;
      border: none;
      cursor: pointer;
      margin-top: 0.5rem;
    }
    ul { list-style: none; padding: 0; }
    li { margin-bottom: 0.5rem; }
    .tabs {
      display: flex;
      margin-bottom: 0.5rem;
    }
    .tab {
      padding: 0.5rem 1rem;
      background: #fff;
      color: maroon;
      cursor: pointer;
      border-radius: 5px;
      margin-right: 0.5rem;
    }
    .tab.active {
      background: maroon;
      color: #fff;
    }
    canvas {
      max-width: 100%;
    }
  </style>
</head>
<body>

<header>
  <h1>🌊 Blackrock, Galway – Tides, Weather, Sea Temp & Sun Times</h1>
</header>

<div class="container">
  <div class="box" id="tides">
    <h2>Today's Tide Events</h2>
    <ul id="tideList">Loading tides...</ul>
  </div>

  <div class="box" id="weather">
    <h2>Current Weather</h2>
    <div id="weatherInfo">Loading weather...</div>
  </div>

  <div class="box" id="sun">
    <h2>☀️ Sunrise & Sunset</h2>
    <div id="sunInfo">Loading sun times...</div>
  </div>

  <div class="box" id="water">
    <h2>Sea Temperature</h2>
    <div class="tabs">
      <div class="tab active" onclick="switchDay('yesterday')">Yesterday</div>
      <div class="tab" onclick="switchDay('today')">Today</div>
      <div class="tab" onclick="switchDay('tomorrow')">Tomorrow</div>
    </div>
    <div id="waterSummary">Loading water temps...</div>
    <canvas id="waterChart" height="200"></canvas>
    <button onclick="toggleUnits()">Switch to °F</button>
  </div>
</div>

<script>
  const lat = 53.267;
  const lon = -9.083;
  const stormGlassKey = 'a78cf856-67aa-11f0-976d-0242ac130006-a78cf928-67aa-11f0-976d-0242ac130006';
  const openWeatherKey = '5b7cc4376be79b5231b607350a4b485d';
  let currentUnit = 'C';
  let selectedDay = 'yesterday';
  let chartInstance = null;
  let tempData = {};

  function toF(c) { return (c * 9/5 + 32).toFixed(1); }
  function convertTemps(temps, unit) {
    return unit === 'F' ? temps.map(toF) : temps.map(t => +t.toFixed(1));
  }

  function toggleUnits() {
    currentUnit = currentUnit === 'C' ? 'F' : 'C';
    document.querySelector('#water button').textContent = `Switch to °${currentUnit === 'C' ? 'F' : 'C'}`;
    renderChart();
  }

  function switchDay(day) {
    selectedDay = day;
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    document.querySelector(`.tab:contains("${day.charAt(0).toUpperCase() + day.slice(1)}")`)?.classList.add('active');
    renderChart();
  }

  async function fetchWaterTemp() {
    const days = {
      yesterday: -1,
      today: 0,
      tomorrow: 1
    };
    const promises = Object.entries(days).map(async ([label, offset]) => {
      const date = new Date();
      date.setDate(date.getDate() + offset);
      const dateStr = date.toISOString().split('T')[0];
      const start = `${dateStr}T00:00:00Z`;
      const end = `${dateStr}T23:59:59Z`;
      const res = await fetch(`https://api.stormglass.io/v2/weather/point?lat=${lat}&lng=${lon}&params=waterTemperature&start=${start}&end=${end}`, {
        headers: { Authorization: stormGlassKey }
      });
      const json = await res.json();
      tempData[label] = {
        temps: json.hours.map(h => h.waterTemperature?.noaa).filter(Boolean),
        labels: json.hours.map(h => new Date(h.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }))
      };
    });
    await Promise.all(promises);
    renderChart();
  }

  function renderChart() {
    const { temps, labels } = tempData[selectedDay];
    const converted = convertTemps(temps, currentUnit);
    const avg = (converted.reduce((a, b) => a + b, 0) / converted.length).toFixed(1);
    const high = Math.max(...converted).toFixed(1);
    const low = Math.min(...converted).toFixed(1);

    document.getElementById('waterSummary').innerHTML = `
      <p><strong>${selectedDay.toUpperCase()} 🌡️ Avg:</strong> ${avg}°${currentUnit}</p>
      <p>🔺 High: ${high}°${currentUnit} &nbsp;&nbsp; 🔻 Low: ${low}°${currentUnit}</p>
    `;

    if (chartInstance) chartInstance.destroy();

    chartInstance = new Chart(document.getElementById('waterChart').getContext('2d'), {
      type: 'line',
      data: {
        labels,
        datasets: [{
          label: `Sea Temp – ${selectedDay}`,
          data: converted,
          borderColor: '#fff',
          backgroundColor: 'rgba(255,255,255,0.2)',
          fill: true,
          pointRadius: 4,
          pointHoverRadius: 6,
          tension: 0.3
        }]
      },
      options: {
        scales: {
          y: { title: { display: true, text: `Temp (°${currentUnit})` } },
          x: { title: { display: true, text: 'Time of Day' } }
        },
        plugins: {
          tooltip: {
            callbacks: {
              label: ctx => `${ctx.parsed.y}°${currentUnit}`
            }
          },
          legend: { display: true }
        }
      }
    });
  }

  async function fetchTides() {
    const today = new Date().toISOString().split('T')[0];
    const tomorrow = new Date(Date.now() + 86400000).toISOString().split('T')[0];
    const res = await fetch(`https://api.stormglass.io/v2/tide/extremes/point?lat=${lat}&lng=${lon}&start=${today}&end=${tomorrow}`, {
      headers: { Authorization: stormGlassKey }
    });
    const data = await res.json();
    const list = document.getElementById('tideList');
    list.innerHTML = '';
    data.data.forEach(entry => {
      const time = new Date(entry.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      list.innerHTML += `<li>${entry.type.toUpperCase()} at ${time} – ${entry.height.toFixed(2)} m</li>`;
    });
  }

  async function fetchWeather() {
    const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${openWeatherKey}`);
    const data = await res.json();
    const temp = data.main.temp.toFixed(1);
    const feels = data.main.feels_like.toFixed(1);
    const wind = data.wind.speed;
    const desc = data.weather[0].description;
    document.getElementById('weatherInfo').innerHTML = `
      <p><strong>${desc.charAt(0).toUpperCase() + desc.slice(1)}</strong></p>
      <p>🌡️ Temp: ${temp}°C (Feels like: ${feels}°C)</p>
      <p>💨 Wind: ${wind} m/s</p>
    `;
    const sunrise = new Date(data.sys.sunrise * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const sunset = new Date(data.sys.sunset * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    document.getElementById('sunInfo').innerHTML = `
      <p>🌅 Sunrise: ${sunrise}</p>
      <p>🌇 Sunset: ${sunset}</p>
    `;
  }

  fetchTides();
  fetchWeather();
  fetchWaterTemp();
</script>

</body>
</html>
